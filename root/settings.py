"""
Django settings for kapa_ingestion project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# We are providing a default value here because in Heroku we need to
# run RUN python manage.py collectstatic --noinput as part of the build
# and that fails otherwise. This is fine in production because it will
# take the real key from the production environemnt
SECRET_KEY = os.getenv("SECRET_KEY", default=get_random_secret_key())

DEBUG = True

ALLOWED_HOSTS = ["*"]


CORS_ALLOW_HEADERS = [
    "x-api-key",
    "X-API-KEY",
    "content-type",
    "accept",
    "origin",
    "authorization",
    "x-csrftoken",
    "x-requested-with",
    "x-api-token",
    "X-API-TOKEN",
]

CORS_ALLOW_ALL_ORIGINS = True

# Celery
CELERY_BROKER_URL = os.environ.get("STACKHERO_RABBITMQ_AMQP_URL_TLS", "")

CELERY_TASK_TRACK_STARTED = True

CELERY_RESULT_BACKEND = "django-db"

CELERY_RESULT_EXPIRES = None  # results are not expired

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "org.apps.OrgConfig",
    "query.apps.QueryConfig",
    "django_celery_results",
    "django_celery_beat",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_api_key",
    "corsheaders",
    "drf_yasg",
    "django_filters",
    "debug_toolbar",
    "guardian",
    "django_extensions",
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#configure-internal-ips
if DEBUG:
    import socket  # only if you haven't already imported this

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]

ROOT_URLCONF = "root.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "root.wsgi.application"

# This is the maximum size (in bytes) of a file that will be uploaded into memory.
# If an uploaded file is larger than this size, Django will store it in a temporary
# file on disk instead. We set it to 0 so that it is always stored on disk.
FILE_UPLOAD_MAX_MEMORY_SIZE = 0
# This is the maximum size (in bytes) for a request's body:
# we set it to 200MB (slightly more to have buffer)
DATA_UPLOAD_MAX_MEMORY_SIZE = 210000000

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_NAME", ""),
        "USER": os.environ.get("POSTGRES_USER", ""),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", ""),
        "HOST": os.environ.get("POSTGRES_HOST", ""),
        "PORT": os.environ.get("POSTGRES_PORT", ""),
    }
}

os.environ["DJANGO_SETTINGS_MODULE"] = "root.settings"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "formatters": {
        "verbose": {
            "format": "[%(levelname)s %(asctime)s %(module)s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

# Django rest framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # We need to add TokenAuthentication before SessionAuthentication
        # because otherwise DRF returns a 403 for unauthenticated requests.
        # We want to return a 401 instead, which is what TokenAuthentication does.
        # So we need to make sure that TokenAuthentication is checked first and that
        # the request fails there.
        # Interesting discussion here:
        # https://github.com/encode/django-rest-framework/issues/5968
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "auth": "5/minute",
    },
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

API_KEY_CUSTOM_HEADER = "HTTP_X_API_KEY"

STATIC_ROOT = BASE_DIR / "staticfiles"

# Authentication
AUTH_USER_MODEL = "org.User"

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # this is the default
    "guardian.backends.ObjectPermissionBackend",  # for object level permissions
)

# https://django-guardian.readthedocs.io/en/stable/userguide/custom-user-model.html
GUARDIAN_MONKEY_PATCH = False

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "cache_table",
    }
}

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "X-API-KEY", "in": "header"}
    },
    "DEFAULT_API_URL": "https://api.placeholder.com",
}

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.sendgrid.net")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "apikey")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "test")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USE_TLS = bool(int(os.getenv("EMAIL_USE_TLS", "1")))
EMAIL_USE_SSL = bool(int(os.getenv("EMAIL_USE_SSL", "0")))
DEFAULT_FROM_EMAIL = "founders@kapa.ai"

OTP_CACHE_PREFIX = "otp_"
OTP_CACHE_TIMEOUT = 300
